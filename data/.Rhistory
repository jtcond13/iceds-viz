my_sentiments %>% count(word, sentiment, sort = T) %>% filter(sentiment == 'negative') %>% head(n=10)
View(my_sentiments)
install.packages('lexicon')
install.packages('sentimentr')
?sentiment()
library(sentimentr)
?sentiment()
View(glassDoor)
sentiment(get_sentences(glassDoor$pros))
rm(advice_grams, con_grams, pro_grams)
library(tidyverse)
library(magrittr)
library(tm)
library(tidytext)
library(lexicon)
library(sentimentr)
load("glassDoor.RData")
glassDoor %<>% modify_if(is.character, function(x) {
y <- gsub('([a-z])([A-Z])', '\\1 \\2', x)
z <- tm::removePunctuation(x)
return(z)
})
pro_grams <- unnest_tokens(glassDoor, grams, pros, token = "ngrams", n = 3) %>% count(grams, sort = TRUE)
head(pro_grams, n=10)
con_grams <- unnest_tokens(glassDoor, grams, cons, token = "ngrams", n = 3) %>% count(grams, sort = TRUE)
head(con_grams, n=10)
advice_grams <- unnest_tokens(glassDoor, grams, advice, token = "ngrams", n = 3) %>% count(grams, sort = TRUE) %>% filter(!is.na(grams))
head(advice_grams, n=10)
rm(advice_grams, con_grams, pro_grams)
?mutate()
?includes()
?contains()
glassDoor_sentiments <- glassDoor %>% select(-contains('rating')) %>%
group_by(organization)
View(glassDoor_sentiments)
?mutate_all()
glassDoor_sentiments <- glassDoor %>% select(-contains('rating')) %>%
group_by(organization) %>%
mutate_all(funs(sentiment(get_sentences(.))))
str(glassDoor)
glassDoor_sentiments <- glassDoor %>% select(-contains('rating')) %>%
group_by(organization) %>%
mutate_all(funs(sentiment(get_sentences(as.character(.)))))
glassDoor_sentiments <- glassDoor %>% select(-contains('rating')) %>%
group_by(organization) %>%
mutate_all(funs(sentiment(get_sentences(.))))
glassDoor_sentiments <- glassDoor %>% select(-contains('rating')) %>%
group_by(organization) %>%
mutate_if(is.data.frame, as.character) %>%
mutate_all(funs(sentiment(get_sentences(.))))
glassDoor_sentiments <- glassDoor %>% select(-contains('rating')) %>%
group_by(organization) %>%
mutate_if(is.data.frame, as.character) %>%
modify_all(function(x){
return(sentiment(get_sentences(x)))
})
glassDoor_sentiments <- glassDoor %>% select(-contains('rating')) %>%
group_by(organization) %>%
mutate_if(is.data.frame, as.character)
View(glassDoor_sentiments)
sentiment(glassDoor_sentiments$pros)
sentiment(get_sentences(glassDoor_sentiments$pros))
sentiment(get_sentences(glassDoor_sentiments$pros)) %>% mean()
glassDoor_sentiments <- glassDoor %>% select(-contains('rating')) %>%
group_by(organization) %>%
mutate_all(funs(
~mean(sentiment(get_sentences(.))[,4])
))
glassDoor_sentiments <- glassDoor %>% select(-contains('rating')) %>%
group_by(organization) %>%
mutate_all(funs(
mean(sentiment(get_sentences(.))[,4])
))
View(glassDoor_sentiments)
glassDoor_sentiments <- glassDoor %>% select(-contains('rating')) %>%
group_by(organization) %>%
mutate_all(funs(
sentiment(get_sentences(.))[,4]
))
glassDoor_sentiments <- glassDoor %>% select(-contains('rating')) %>%
group_by(organization)
View(glassDoor_sentiments)
View(glassDoor_sentiments)
glassDoor_sentiments <- glassDoor %>% select(-contains('rating')) %>%
group_by(organization) %>%
summarise_each(mean(sentiment(get_sentences(.))[,4]))
glassDoor_sentiments <- glassDoor %>% select(-contains('rating')) %>%
group_by(organization) %>%
summarise_each(funs(mean(sentiment(get_sentences(.))[,4])))
View(glassDoor_sentiments)
rm(glassDoor_sentiments)
View(glassDoor)
?modify_at
glassDoor[,1] %>% get_sentences() %>% sentiment()
glassDoor[,1] %>% get_sentences() %>% sentiment()$sentiment
?sentiment()
glassDoor[,1] %>% get_sentences() %>% sentiment() %>% select(sentiment)
library(tidyverse)
library(magrittr)
library(tm)
library(tidytext)
library(lexicon)
library(sentimentr)
load("glassDoor.RData")
glassDoor %<>% modify_if(is.character, function(x) {
y <- gsub('([a-z])([A-Z])', '\\1 \\2', x)
z <- tm::removePunctuation(x)
return(z)
})
View(glassDoor)
glassDoor %<>% modify_if(is.character, function(x) {
y <- gsub('([a-z])([A-Z])', '\\1 \\2', x)
return(y)
})
View(glassDoor)
text_cols <- c('pros','cons','advice')
glassDoor %<>% modify_at(text_cols, function(x){
y <- sentiment(get_sentences(x))
return(select(y, sentiment))
})
View(glassDoor)
View(glassDoor)
library(tidyverse)
library(magrittr)
library(tm)
library(tidytext)
library(lexicon)
library(sentimentr)
load("glassDoor.RData")
glassDoor %<>% modify_if(is.character, function(x) {
y <- gsub('([a-z])([A-Z])', '\\1 \\2', x)
return(y)
})
head(glassDoor)
library(tidyverse)
library(magrittr)
library(tm)
library(tidytext)
library(lexicon)
library(sentimentr)
load("glassDoor.RData")
glassDoor %<>% modify_if(is.character, function(x) {
y <- gsub('([a-z])([A-Z])', '\\1 \\2', x)
return(y)
})
rmarkdown::paged_table(glassDoor)
text_cols <- c('pros','cons','advice')
glassDoor_scores <- glassDoor %>% modify_at(text_cols, function(x){
y <- sentiment(get_sentences(x))
return(select(y, sentiment))
})
text_cols <- c('pros','cons','advice')
glassDoor %<>% modify_at(text_cols, function(x){
y <- sentiment(get_sentences(x))
return(select(y, sentiment))
})
library(tidyverse)
library(magrittr)
library(tm)
library(tidytext)
library(lexicon)
library(sentimentr)
load("glassDoor.RData")
glassDoor %<>% modify_if(is.character, function(x) {
y <- gsub('([a-z])([A-Z])', '\\1 \\2', x)
return(y)
})
rmarkdown::paged_table(glassDoor)
text_cols <- c('pros','cons','advice')
glassDoor %<>% modify_at(text_cols, function(x){
y <- sentiment(get_sentences(x))
return(select(y, sentiment))
})
library(tidyverse)
library(magrittr)
library(tm)
library(tidytext)
library(lexicon)
library(sentimentr)
load("glassDoor.RData")
glassDoor %<>% modify_if(is.character, function(x) {
y <- gsub('([a-z])([A-Z])', '\\1 \\2', x)
return(y)
})
rmarkdown::paged_table(glassDoor)
text_cols <- c('pros','cons','advice')
glassDoor %<>% modify_at(text_cols, function(x){
y <- sentiment(get_sentences(x))
return(select(y, sentiment))
})
text_cols <- c('pros','cons','advice')
glassDoor %<>% modify_at(text_cols, function(x){
y <- sentiment(get_sentences(x))
z <- select(y, sentiment)
return(z)
})
load("glassDoor.RData")
glassDoor %<>% modify_if(is.character, function(x) {
y <- gsub('([a-z])([A-Z])', '\\1 \\2', x)
return(y)
})
text_cols <- c('pros','cons','advice')
glassDoor %<>% modify_at(text_cols, function(x){
y <- sentiment(get_sentences(x))
z <- select(y, sentiment)
return(z)
})
text_cols <- c('pros','cons','advice')
glassDoor %<>% modify_at(text_cols, function(x){
y <- sentiment(get_sentences(x)) %>%
select(sentiment)
return(y)
})
View(glassDoor)
glassDoor$pro_sentiment <- sentiment(get_sentences(glassDoor$pros)) %>% select(sentiment)
sentiment(get_sentences(glassDoor$pros))
3604 / 1831
load("glassDoor.RData")
glassDoor %<>% modify_if(is.character, function(x) {
y <- gsub('([a-z])([A-Z])', '\\1 \\2', x)
return(y)
})
sentiment(get_sentences(glassDoor$pros))
?get_sentences()
sentiment(get_sentences(glassDoor$pros)) %>% View()
library(tidyverse)
library(magrittr)
library(tm)
library(tidytext)
library(lexicon)
library(sentimentr)
load("glassDoor.RData")
glassDoor %<>% modify_if(is.character, function(x) {
y <- gsub('([a-z])([A-Z])', '\\1 \\2', x)
return(y)
})
glassDoor %>% rmarkdown::paged_table()
text_cols <- c('pros','cons','advice')
sentiment(get_sentences(glassDoor[,1]))
tmp <- sentiment(get_sentences(glassDoor[,1]))
length(unique(tmp$element_id))
length(unique(tmp))
View(tmp[element_id == 2,])
tmp[element_id == 1830,]
unique(tmp)
View(glassDoor)
?text_cols
?modify_at
glassDoor %<>% modify_at(vars(text_cols), function(x) {
y <- sentiment(get_sentences(x))
return(y[,4])
})
1831 * 2
text_cols <- c('pros','cons','advice')
glassDoor %<>% modify_at(vars(text_cols), function(x) {
y <- sentiment(get_sentences(x))
z <- y[,4]
print(z)
return(z)
})
?sentiment()
?sentiment_by
glassDoor %>% str()
glassDoor_pros <- sentiment_by(get_sentences(glassDoor$pros), by="organization")
glassDoor_pros
View(glassDoor_pros)
glassDoor_pros <- sentiment_by(get_sentences(glassDoor$pros), by=organization)
glassDoor_pros <- sentiment_by(get_sentences(glassDoor$pros), by=glassDoor$organization)
View(glassDoor_pros)
View(glassDoor)
tmp <- map(text_cols, function(x){
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
return(y[,4])
})
tmp[[1]]
tmp[[2]]
tmp[[3]]
?unlist()
as.data.frame()
?as.data.frame()
text_cols <- c('pros','cons','advice')
tmp <- map(text_cols, function(x){
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
return(y[,4])
}) %>% as.tibble()
tmp <- map(text_cols, function(x){
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
return(y[,4])
}) %>% as.data.frame()
View(tmp)
text_cols <- c('pros','cons','advice')
org_sentiment <- map(text_cols, function(x){
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
return(y[,4])
}) %>% rbind.data.frame(glassDoor$organization, .)
org_sentiment <- map(text_cols, function(x){
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
return(y[,4])
})
org_sentiment <- map(text_cols, function(x){
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
return(y[,4])
}) %>% cbind.data.frame(glassDoor$organization, .)
org_sentiment <- map(text_cols, function(x){
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
return(y[,4])
})
org_sentiment %<>% cbind.data.frame(glassDoor$organization, .)
View(org_sentiment)
org_sentiment <- map(text_cols, function(x){
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
return(y[,4])
}) %>% as.data.frame()
View(org_sentiment)
org_sentiment %<>% cbind.data.frame(glassDoor$organization, .)
org_sentiment <- map(text_cols, function(x){
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
print(y)
return(y[,4])
}) %>% as.data.frame()
text_cols <- c('pros','cons','advice')
orgs_list <- c()
org_sentiment <- map(text_cols, function(x){
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
orgs_list <- y[,1]
return(y[,4])
}) %>% as.data.frame()
org_sentiment %<>% cbind.data.frame(orgs, .)
text_cols <- c('pros','cons','advice')
orgs_list <- c()
org_sentiment <- map(text_cols, function(x){
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
orgs_list <- y[,1]
return(y[,4])
}) %>% as.data.frame()
org_sentiment %<>% cbind.data.frame(orgs, .)
text_cols <- c('pros','cons','advice')
orgs_list <- c()
org_sentiment <- map(text_cols, function(x){
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
orgs_list <- y[,1]
return(y[,4])
}) %>% as.data.frame()
org_sentiment %<>% cbind.data.frame(orgs_list, .)
sentiment_by(get_sentences(glassDoor[,1]), by=glassDoor$organization)
sentiment_by(get_sentences(glassDoor[,2), by=glassDoor$organization)
sentiment_by(get_sentences(glassDoor[,2]), by=glassDoor$organization)
text_cols <- c('pros','cons','advice')
org_sentiment <- map(text_cols, function(x){
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
return(y[,4])
}) %>% as.data.frame()
orgs_list <- sentiment_by(get_sentences(glassDoor[,'pros']), by=glassDoor$organization) %>%                  select(organization)
org_sentiment %<>% cbind.data.frame(orgs_list, .)
names(org_sentiment)[2:4] <- text_cols
View(org_sentiment)
orgs_list <- sentiment_by(get_sentences(glassDoor[,'pros']), by=glassDoor$organization) %>%                  select(organization)
text_cols <- c('pros','cons','advice')
org_sentiment <- map(text_cols, function(x){
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
orgs_list <<- y[,1]
return(y[,4])
}) %>% as.data.frame()
# orgs_list <- sentiment_by(get_sentences(glassDoor[,'pros']), by=glassDoor$organization) %>%                  select(organization)
org_sentiment %<>% cbind.data.frame(orgs_list, .)
names(org_sentiment)[2:4] <- text_cols
View(org_sentiment)
text_cols <- c('pros','cons','advice')
org_sentiment <- map(text_cols, function(x){
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
orgs_list <<- y[,1]
return(y[,4])
}) %>% as.data.frame()
org_sentiment %<>% cbind.data.frame(orgs_list, .)
names(org_sentiment)[2:4] <- text_cols
org_sentiment %>% rmarkdown::paged_table()
rm(glassDoor_pros)
View(glassDoor)
library(stm)
install.packages('stm')
library(stm)
?stm
library(tidyverse)
library(magrittr)
library(stm)
library(tidytext)
library(lexicon)
library(sentimentr)
load("glassDoor.RData")
glassDoor %<>% modify_if(is.character, function(x) {
y <- gsub('([a-z])([A-Z])', '\\1 \\2', x)
return(y)
})
glassDoor %>% rmarkdown::paged_table()
text_cols <- c('pros','cons','advice')
org_sentiment <- map(text_cols, function(x) {
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
orgs_list <<- y[,1]
return(y[,4])
}) %>% as.data.frame()
org_sentiment %<>% cbind.data.frame(orgs_list, .)
names(org_sentiment)[2:4] <- text_cols
org_sentiment %>% rmarkdown::paged_table()
?textProcessor
comments <- rbind(glassDoor$pros, glassDoor$cons)
comments <- rbind.data.frame(glassDoor$pros, glassDoor$cons)
View(comments)
comments <- c(glassDoor$pros, glassDoor$cons)
View(comments)
View(comments[2000])
commentText <- textProcessor(comments)
commentText
str(commentText)
commentPrep <- prepDocuments(document = commentText$documents, vocab = commentText$vocab,
meta = commentText$meta)
?searchK
kTest = searchK(documents = textPrep$documents,
vocab = textPrep$vocab, K = c(3, 4, 5, 10, 20), verbose = FALSE)
kTest = searchK(documents = commentPrep$documents,
vocab = commentPrep$vocab, K = c(3, 4, 5, 10, 20), verbose = FALSE)
set.seed(3020)
kTest = searchK(documents = commentPrep$documents,
vocab = commentPrep$vocab, K = c(3, 4, 5, 10, 20), verbose = FALSE)
set.seed(3020)
kTest = searchK(documents = commentPrep$documents,
vocab = commentPrep$vocab, K = c(3, 4, 5, 10, 20), proportion = .6)
library(tidyverse)
library(magrittr)
library(stm)
library(tidytext)
library(lexicon)
library(sentimentr)
load("glassDoor.RData")
glassDoor %<>% modify_if(is.character, function(x) {
y <- gsub('([a-z])([A-Z])', '\\1 \\2', x)
return(y)
})
glassDoor %>% rmarkdown::paged_table()
text_cols <- c('pros','cons','advice')
org_sentiment <- map(text_cols, function(x) {
y <- sentiment_by(get_sentences(glassDoor[,x]), by=glassDoor$organization)
orgs_list <<- y[,1]
return(y[,4])
}) %>% as.data.frame()
org_sentiment %<>% cbind.data.frame(orgs_list, .)
names(org_sentiment)[2:4] <- text_cols
org_sentiment %>% rmarkdown::paged_table()
comments <- c(glassDoor$pros, glassDoor$cons)
commentText <- textProcessor(comments)
commentPrep <- prepDocuments(document = commentText$documents, vocab = commentText$vocab,
meta = commentText$meta)
set.seed(3020)
kTest = searchK(documents = commentPrep$documents,
vocab = commentPrep$vocab, K = c(3, 4, 5, 10, 20), proportion = .6, verbose = F)
plot(kTest)
set.seed(3020)
# Commenting this out so the doc will knit faster
# kTest = searchK(documents = commentPrep$documents,
#          vocab = commentPrep$vocab, K = c(3, 4, 5, 10, 20), proportion = .6, verbose = F)
plot(kTest)
topics5 = stm(documents = commentPrep$documents,
vocab = commentPrep$vocab, seed = 1001,
K = 5, verbose = FALSE)
labelTopics(topics5)
findThoughts(topics5, texts = commentPrep$meta$text, n = 1)
findThoughts(topics5, texts = commentPrep$documents, n = 5)
?findThoughts
findThoughts(topics5, texts = comments, n = 5)
findThoughts(topics5, texts = commentText$documents, n = 5)
?cloud
cloud(topics5)
library(wordcloud)
install.packages('wordcloud')
library(wordcloud)
cloud(topics5)
cloud(topics5, topics = 1)
cloud(topics5, topic = 1)
?wordcloud()
?plotQuote
?plot.STM
plot(topics5, type = c("perspectives"), labeltype = c("frex"))
plot(topics5, type = c("labels"), labeltype = c("frex"))
# Commenting this out to let this knit faster
# topics5 = stm(documents = commentPrep$documents,
#             vocab = commentPrep$vocab, seed = 1001,
#             K = 5, verbose = FALSE)
labelTopics(topics5)
plot(topics5, type = c("summary"), labeltype = c("frex"))
# Commenting this out to let this knit faster
# topics5 = stm(documents = commentPrep$documents,
#             vocab = commentPrep$vocab, seed = 1001,
#             K = 5, verbose = FALSE)
labelTopics(topics5)
?findThoughts
?findTopic()
findThoughts(topics5, commentText$meta)
findThoughts(topics5, commentText$documents)
str(commentPrep)
length(comments)
str(commentText)
str(commentText$documents[[1]])
str(commentText$documents[[2]])
plot(topics5, type = c("summary"), labeltype = c("frex"))
getwd()
setwd("/Users/jackcondon/Documents/dataviz-comp")
setwd("/Users/jackcondon/Documents/dataviz-comp/scripts")
getwd()
source('~/Documents/dataviz-comp/scripts/colleges.R')
View(ndata)
unique(ndata$state.abbreviation)
ndata %<>% filter(!is.na(avg_act) & !is.na(avg_sat)) %>% filter(total.enrollment > 1000) %>% filter(state.abbreviation != 'Hawaii')
source('~/Documents/dataviz-comp/scripts/colleges.R')
